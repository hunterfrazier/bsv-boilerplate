import "util.scrypt";

// Auction: highest bid before deadline wins
contract Auction {
    PubKey auctioner;
    int auctionDeadline;

    // bid with a higher offer
    public function bid(Ripemd160 bidder, int bid, SigHashPreimage txPreimage) {
        require(Tx.checkPreimage(txPreimage));

        int highestBid = Util.value(txPreimage);
        require(bid > highestBid);

        // read previous highest bidder
        bytes lockingScript = Util.scriptCode(txPreimage);
        int scriptLen = len(lockingScript);
        Ripemd160 highestBidder = Ripemd160(lockingScript[scriptLen - Util.PubKeyHashLen : ]);

        // auction continues with a higher bidder
        bytes auctionScript = lockingScript[: scriptLen - Util.PubKeyHashLen] + bidder;
        bytes auctionOutput = Util.buildOutput(auctionScript, bid);

        // refund previous highest bidder
        bytes refundScript = Util.buildPublicKeyHashScript(highestBidder);
        bytes refundOutput = Util.buildOutput(refundScript, highestBid);
        
        require(hash256(auctionOutput + refundOutput) == Util.hashOutputs(txPreimage));
    }

    // withdraw after bidding is over
    public function close(Sig sig, SigHashPreimage txPreimage) {
		require(Tx.checkPreimage(txPreimage));
		require(Util.nLocktime(txPreimage) >= this.auctionDeadline);
        require(checkSig(sig, this.auctioner));
	}
}